DROP TABLE IF EXISTS comments;
DROP SEQUENCE IF EXISTS comments_id_seq;
DROP TABLE IF EXISTS users;
DROP SEQUENCE IF EXISTS users_id_seq;
DROP TABLE IF EXISTS tasks;
DROP SEQUENCE IF EXISTS tasks_id_seq;
DROP TABLE IF EXISTS projects;
DROP SEQUENCE IF EXISTS projects_id_seq;

CREATE SEQUENCE projects_id_seq AS INTEGER START WITH 1;
CREATE TABLE projects (
  id          INTEGER GENERATED BY DEFAULT AS SEQUENCE projects_id_seq PRIMARY KEY,
  name        LONGVARCHAR NOT NULL
);

CREATE SEQUENCE tasks_id_seq AS INTEGER START WITH 1;
CREATE TABLE tasks (
  id          INTEGER GENERATED BY DEFAULT AS SEQUENCE tasks_id_seq PRIMARY KEY,
  project_id  INTEGER NOT NULL,
  name        LONGVARCHAR NOT NULL,
  type        INTEGER NOT NULL,
  status      INTEGER NOT NULL,
  priority    INTEGER NOT NULL,
  description LONGVARCHAR,
  assignee_id INTEGER NOT NULL,
  FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE
);

CREATE SEQUENCE users_id_seq AS INTEGER START WITH 1;
CREATE TABLE users (
  id          INTEGER GENERATED BY DEFAULT AS SEQUENCE users_id_seq PRIMARY KEY,
  email       LONGVARCHAR NOT NULL UNIQUE,
  password    LONGVARCHAR NOT NULL,
  name        LONGVARCHAR NOT NULL,
  role        INTEGER NOT NULL,
  position    INTEGER NOT NULL
);

CREATE SEQUENCE comments_id_seq AS INTEGER START WITH 1;
CREATE TABLE comments (
  id          INTEGER GENERATED BY DEFAULT AS SEQUENCE comments_id_seq PRIMARY KEY,
  task_id     INTEGER NOT NULL,
  author      LONGVARCHAR NOT NULL,
  datetime    TIMESTAMP,
  text        LONGVARCHAR,
  FOREIGN KEY (task_id) REFERENCES tasks (id) ON DELETE CASCADE
);
